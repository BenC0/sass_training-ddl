// Storing the brand colours in variables to allow us to resuse them without remembering specific hex codes
// This ensures we are using the same colour values throughout the projects
// This also makes it easier to maintain the brand colours
$brand-primary--green: #1BBC8C;
$brand-primary--grey: #A6A6A6;
$brand-primary--white: #E9EEEF;

$brand-accent--green: #1ABC9C;
$brand-accent--blue: #2980B9;
$brand-accent--orange: #FFBE76;
$brand-accent--white: #FFFFFF;
$brand-accent--slate: #595959;
$brand-accent--light-blue: #23D3D0;

$gutter: 15px;
$section-padding--v: $gutter * 5;

$intro-content--font-size: 70px;

$input--size: 44px;

// Declaring extensions, allowing us to reuse these styles throughout the project.
// Keeps styles DRY
%absolute-center {
	top: 50%;
	left: 50%;
	position: absolute;
	transform: translate(-50%, -50%);
}

%vertical-center {
	top: 50%;
	position: absolute;
	transform: translateY(-50%);
}

%overlay {
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	position: absolute;
}

// Extensions can extend each other
%psuedo-overlay {
	// This is how you make use of the extension
	@extend %overlay;
	content: ' ';
}

// Declaring mixins so we can reuse styles, similar to extensions but this allows us
// to specify the colours used each time we call it.
@mixin emphasise($col1, $col2) {
	$offset: 3px;
	text-shadow: -#{$offset} -#{$offset} 0px $col1,
					#{$offset} #{$offset} 0px $col2;
}

// Complex mixin below...

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a shadow and hover for a card effect.
/// @param {Number} $i - depth level
/// @return {props and values}
@mixin level($i, $hover) {
	position: relative;
	transition: all 0.15s ease-out;
	// Using if statements to create more dynamic styles
	@if $i != 0 {
		box-shadow: bottom-shadow($i), top-shadow($i);
	} @else {
		box-shadow: 0px 0px 0px 0px rgba(0,0,0,0.1);
	}

	@if $hover == true {
		&::after {
			content: "";
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			opacity: 0;
			z-index: 1;
			background: white;
			backface-visibility: hidden;
			transition: all 0.15s ease-out;
		}
		&:hover {
			transform: scale(1.01);
			box-shadow: bottom-shadow($i+1), top-shadow($i+1);

			&::after {
				opacity: 0.15;
			}
		}
	}
}